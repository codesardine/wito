{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wito","text":"<p>Wito is a Python-based, Linux-only desktop application framework that bridges web technologies with native system capabilities through WebKit. It allows to create efficient, modern applications with the flexibility of web interfaces and the performance of native desktop applications. Wito offers seamless interoperability between JavaScript and Python and UI autoreload. </p> <p>Wito autogenerates JavaScript bindings from interface.API, you can disable this in wito.config.json, API can still be accessed using the _invoke JavaScript method.</p> <p>This was done out out my disire to have a framework for fast Linux prototyping and is not tested across diferent distributions.</p> <p>API Docs</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>GTK 4</li> <li>WebKit 6</li> <li>Python Gobject Introspection</li> <li>Python Watchdog</li> </ul>"},{"location":"#quick-started","title":"Quick Started","text":"<p>Check examples directory</p> <pre><code>poetry build\npoetry install\n</code></pre> <p>Python example</p> <pre><code>from wito.application import start\n\n\nif __name__ == \"__main__\":\n    start(\n        dev_tools=True  # Enable dev tools \n    )\n</code></pre> <p>JavaScript example</p> <pre><code>wito.onReady(() =&gt; {\n    await wito.notify('Hello', 'This is a notification', 'normal');    \n});\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>wito<ul> <li>application</li> <li>core</li> <li>extensions<ul> <li>ext_loader</li> </ul> </li> <li>file_watcher</li> <li>interface</li> <li>notifications</li> <li>screen</li> <li>utils</li> <li>window</li> </ul> </li> </ul>"},{"location":"reference/configuration/settings/","title":"Wito Configuration","text":"<p>The configuration file (<code>wito-config.json</code>) allows you to customize various aspects of your Wito application.</p> <p>Create a wito-config.json file in your project root:</p>"},{"location":"reference/configuration/settings/#configuration-structure","title":"Configuration Structure","text":"<pre><code>{   \n    \"wito\": {\n        \"generateBindings\": true\n    },\n    \"window\": {\n        \"title\": \"wito\",\n        \"width\": 1200,\n        \"height\": 800,\n        \"isFullScreen\": false,\n        \"isMaximized\": false,\n        \"isResizable\": true\n    }\n}\n</code></pre>"},{"location":"reference/configuration/settings/#settings-reference","title":"Settings Reference","text":""},{"location":"reference/configuration/settings/#wito-settings","title":"Wito Settings","text":"Property Type Default Description generateBindings boolean true Enables automatic generation of JavaScript bindings for Python methods"},{"location":"reference/configuration/settings/#window-settings","title":"Window Settings","text":"Property Type Default Description title string \"wito\" The title of the application window width number 1200 Initial window width in pixels height number 800 Initial window height in pixels isFullScreen boolean false Whether the window should start in fullscreen mode isMaximized boolean false Whether the window should start maximized isResizable boolean true Whether the window can be resized by the user"},{"location":"reference/wito/","title":"Index","text":""},{"location":"reference/wito/#wito","title":"wito","text":""},{"location":"reference/wito/#wito-modules","title":"Modules","text":""},{"location":"reference/wito/#wito.bridge","title":"bridge","text":""},{"location":"reference/wito/#wito.bridge-classes","title":"Classes","text":"PythonJavaScriptBridge Source code in <code>wito/bridge.py</code> <pre><code>class PythonJavaScriptBridge:\n    def __init__(self, webview, window, version, wito_dev_mode):\n        self.wito_dev_mode = wito_dev_mode\n        self.view = webview\n        self.win = window\n        self.version = version\n        self.exposed_methods = {}\n        self.pending_js = []\n        self.register_exposed_methods()\n        self.win.connect('realize', self.on_realize)\n\n    def register_exposed_methods(self):\n        for name, method in inspect.getmembers(self, inspect.ismethod):\n            if hasattr(method, '_exposed'):\n                if self.wito_dev_mode:\n                    print(f\"Registering exposed method: {name}\")\n                self.exposed_methods[name] = method\n\n    def eval_js(self, js, callback=None):\n        if self.wito_dev_mode:\n            print(f\"Evaluating JS: {js}\")\n        if self.view.is_loading():\n            self.pending_js.append((js, callback))\n        else:\n            self.view.evaluate_javascript(js, -1, None, callback or None)\n\n    def execute_pending_js(self):\n        while self.pending_js:\n            if self.wito_dev_mode:\n                print(\"Executing pending JS\")   \n            js, callback = self.pending_js.pop(0)\n            self.view.evaluate_javascript(js, -1, None, callback or None)\n\n    def emit_event(self, event, data):\n        \"\"\"\n        Emits an event to the JavaScript layer with associated data.\n\n        This method bridges Python and JavaScript by triggering events in the JavaScript\n        environment. It serializes the Python data to JSON and calls the JavaScript\n        _emitEvent method.\n\n        Args:\n            event (str): The name of the event to emit.\n            data (Any): The data to pass with the event. Must be JSON-serializable.\n\n        Raises:\n            TypeError: If data cannot be serialized to JSON.\n            ValueError: If event name contains invalid characters.\n\n        Example:\n            ```python\n            # Simple event with string data\n            interface.emit_event('user_logged_in', 'John Doe')\n\n            # Event with dictionary data\n            interface.emit_event('data_updated', {\n                'id': 123,\n                'status': 'complete',\n                'timestamp': '2023-01-01'\n            })\n\n            # Event with list data\n            interface.emit_event('items_changed', [1, 2, 3, 4])\n            ```\n\n        Note:\n            - The data must be JSON-serializable\n            - Event names should follow JavaScript naming conventions\n            - The JavaScript layer must have the _emitEvent method defined\n            - Large data structures may impact performance\n\n        See Also:\n            - eval_js: Method used to execute JavaScript code\n            - json.dumps: JSON serialization method\n        \"\"\"\n        js = f\"wito._emitEvent('{event}', {json.dumps(data)})\"\n        self.eval_js(js)\n\n    def on_realize(self, widget):\n        self.settings = Gio.Settings.new(\"org.gnome.desktop.interface\")\n        self.settings.connect(\"changed::color-scheme\", self.on_theme_change)\n        self.win.get_display().get_monitors().connect('items-changed', self.on_monitors_changed)\n        GLib.idle_add(self.set_initial_theme)\n\n    def check_theme(self):\n        try:\n            color_scheme = self.settings.get_string(\"color-scheme\")\n            is_dark = color_scheme == \"prefer-dark\"\n            if self.wito_dev_mode:\n                print(f\"Color scheme: {color_scheme}\", f\"isDark:{is_dark}\")\n            return is_dark\n        except Exception as e:\n            print(f\"Error checking theme: {e}\")\n\n    def set_initial_theme(self):\n        is_dark = self.check_theme()\n        self.set_body_theme_class(is_dark)\n\n    def on_theme_change(self, settings, key):        \n        is_dark = self.check_theme()\n        self.set_body_theme_class(is_dark)\n\n    def theme_emit_change_event(self):\n        \"\"\"\n        Emits a JavaScript event to notify about desktop theme mode changes.\n\n        Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty\n        payload object.\n\n        Example JavaScript usage:            \n            wito.addEventListener('isDarkTheme', (event) =&gt; {\n                // Handle screen change event\n                console.log('Screen configuration changed');\n            });\n\n        Note:\n            - This event automatically gets subscribed to when the bridge is instantiated.\n            - The event automatically adds light-theme or dark-theme classes to document body.\n        \"\"\"\n        js = \"wito._emitEvent('isDarkTheme', {})\"\n        self.eval_js(js)\n\n\n    def set_body_theme_class(self, is_dark):\n        theme_class = 'dark-theme' if is_dark else 'light-theme'\n        js = f\"\"\"\n            document.body.classList.remove('dark-theme', 'light-theme');\n            document.body.classList.add('{theme_class}');\n            console.log('Desktop changed to {theme_class}');\n        \"\"\"\n        self.eval_js(js)\n\n    def on_monitors_changed(self, list_model, position, removed, added):\n        self.screen_emit_change_event()\n\n    def screen_emit_change_event(self):\n        \"\"\"\n        Emits a JavaScript event to notify about screen configuration changes.\n\n        Evaluates JavaScript code that triggers a 'screenChange' event with an empty\n        payload object.\n\n        Example JavaScript usage:            \n            wito.addEventListener('screenChange', (event) =&gt; {\n                // Handle screen change event\n                console.log('Screen configuration changed');\n            });\n        \"\"\"\n        js = \"wito._emitEvent('screenChange', {})\"\n        self.eval_js(js)\n</code></pre> Functions emit_event <pre><code>emit_event(event, data)\n</code></pre> <p>Emits an event to the JavaScript layer with associated data.</p> <p>This method bridges Python and JavaScript by triggering events in the JavaScript environment. It serializes the Python data to JSON and calls the JavaScript _emitEvent method.</p> PARAMETER DESCRIPTION <code>event</code> <p>The name of the event to emit.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to pass with the event. Must be JSON-serializable.</p> <p> TYPE: <code>Any</code> </p> RAISES DESCRIPTION <code>TypeError</code> <p>If data cannot be serialized to JSON.</p> <code>ValueError</code> <p>If event name contains invalid characters.</p> Example <pre><code># Simple event with string data\ninterface.emit_event('user_logged_in', 'John Doe')\n\n# Event with dictionary data\ninterface.emit_event('data_updated', {\n    'id': 123,\n    'status': 'complete',\n    'timestamp': '2023-01-01'\n})\n\n# Event with list data\ninterface.emit_event('items_changed', [1, 2, 3, 4])\n</code></pre> Note <ul> <li>The data must be JSON-serializable</li> <li>Event names should follow JavaScript naming conventions</li> <li>The JavaScript layer must have the _emitEvent method defined</li> <li>Large data structures may impact performance</li> </ul> See Also <ul> <li>eval_js: Method used to execute JavaScript code</li> <li>json.dumps: JSON serialization method</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def emit_event(self, event, data):\n    \"\"\"\n    Emits an event to the JavaScript layer with associated data.\n\n    This method bridges Python and JavaScript by triggering events in the JavaScript\n    environment. It serializes the Python data to JSON and calls the JavaScript\n    _emitEvent method.\n\n    Args:\n        event (str): The name of the event to emit.\n        data (Any): The data to pass with the event. Must be JSON-serializable.\n\n    Raises:\n        TypeError: If data cannot be serialized to JSON.\n        ValueError: If event name contains invalid characters.\n\n    Example:\n        ```python\n        # Simple event with string data\n        interface.emit_event('user_logged_in', 'John Doe')\n\n        # Event with dictionary data\n        interface.emit_event('data_updated', {\n            'id': 123,\n            'status': 'complete',\n            'timestamp': '2023-01-01'\n        })\n\n        # Event with list data\n        interface.emit_event('items_changed', [1, 2, 3, 4])\n        ```\n\n    Note:\n        - The data must be JSON-serializable\n        - Event names should follow JavaScript naming conventions\n        - The JavaScript layer must have the _emitEvent method defined\n        - Large data structures may impact performance\n\n    See Also:\n        - eval_js: Method used to execute JavaScript code\n        - json.dumps: JSON serialization method\n    \"\"\"\n    js = f\"wito._emitEvent('{event}', {json.dumps(data)})\"\n    self.eval_js(js)\n</code></pre> theme_emit_change_event <pre><code>theme_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about desktop theme mode changes.</p> <p>Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('isDarkTheme', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Note <ul> <li>This event automatically gets subscribed to when the bridge is instantiated.</li> <li>The event automatically adds light-theme or dark-theme classes to document body.</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def theme_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about desktop theme mode changes.\n\n    Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('isDarkTheme', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n\n    Note:\n        - This event automatically gets subscribed to when the bridge is instantiated.\n        - The event automatically adds light-theme or dark-theme classes to document body.\n    \"\"\"\n    js = \"wito._emitEvent('isDarkTheme', {})\"\n    self.eval_js(js)\n</code></pre> screen_emit_change_event <pre><code>screen_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about screen configuration changes.</p> <p>Evaluates JavaScript code that triggers a 'screenChange' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('screenChange', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Source code in <code>wito/bridge.py</code> <pre><code>def screen_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about screen configuration changes.\n\n    Evaluates JavaScript code that triggers a 'screenChange' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('screenChange', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n    \"\"\"\n    js = \"wito._emitEvent('screenChange', {})\"\n    self.eval_js(js)\n</code></pre>"},{"location":"reference/wito/#wito.extensions","title":"extensions","text":""},{"location":"reference/wito/#wito.extensions-modules","title":"Modules","text":"ext_loader Functions extension_manager <pre><code>extension_manager(\n    wito_base_path, app_base_path, dev_mode, api, webview\n)\n</code></pre> <p>Load and merge all extension files.</p> Source code in <code>wito/extensions/ext_loader.py</code> <pre><code>def extension_manager(wito_base_path, app_base_path, dev_mode, api, webview):\n    \"\"\"Load and merge all extension files.\"\"\"\n    try:\n        # Collect files from both directories\n        wito_files = _collect_extension_files(wito_base_path)\n        app_files = _collect_extension_files(app_base_path)\n\n        # Merge and inject CSS\n        wito_css = _merge_files(dev_mode, wito_files['css'], file_type='css')\n        app_css = _merge_files(dev_mode, app_files['css'], file_type='css')\n\n        if wito_css and wito_css.content:\n            _inject_css(webview, wito_css.content, \"wito-styles\")\n            if dev_mode:\n                print(f\"Injected Wito CSS from: {', '.join(wito_css.sources)}\")\n\n        if app_css and app_css.content:\n            _inject_css(webview, app_css.content, \"app-styles\")  # Fixed: added webview parameter\n            if dev_mode:\n                print(f\"Injected App CSS from: {', '.join(app_css.sources)}\")\n\n        # Merge and inject JavaScript\n        wito_js = _merge_files(dev_mode, wito_files['js'], file_type='js')\n        app_js = _merge_files(dev_mode, app_files['js'], file_type='js')\n\n        if wito_js and wito_js.content:\n            api.eval_js(wito_js.content)\n            if dev_mode:\n                print(f\"Injected Wito JS from: {', '.join(wito_js.sources)}\")\n\n        if app_js and app_js.content:\n            api.eval_js(app_js.content)\n            if dev_mode:\n                print(f\"Injected App JS from: {', '.join(app_js.sources)}\")\n\n        # Report any errors\n        all_errors = []\n        for result in [wito_css, app_css, wito_js, app_js]:\n            if result and hasattr(result, 'error_files'):\n                all_errors.extend(result.error_files)\n        _report_errors(all_errors)\n\n    except Exception as e:\n        print(f\"Error loading extensions: {str(e)}\")\n</code></pre>"},{"location":"reference/wito/#wito.interface","title":"interface","text":""},{"location":"reference/wito/#wito.interface-classes","title":"Classes","text":"API <p>               Bases: <code>PythonJavaScriptBridge</code></p> <p>API Usage</p> <p>This class creates a bridge between JavaScript and Python, allowing asynchronous  communication.</p> Example <p>Basic usage: <pre><code># Initialize API\nfrom wito.interface import API\n\nclass MyApp(API):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def method(self):\n        return \"Hello\"\n</code></pre></p> Javascript Example <p>Using _invoke: <pre><code>// Basic usage\ntry {\n    const result = await wito._invoke('method', []);\n    console.log(result);\n} catch (error) {\n    console.error('Failed to get data:', error);\n}\n\n// With multiple arguments\nconst userData = await wito._invoke('save_user', [{\n    name: 'John',\n    age: '30'\n}]);\n</code></pre></p> Notes <ul> <li>The method requires WebKit message handlers to be available</li> <li>The method requires the Python side to have a corresponding handler to be available</li> <li>Arguments must be JSON-serializable</li> <li>The callId is automatically incremented for each call</li> <li>Debug messages are logged if devMode is enabled</li> <li>Using _invoke from Javascript is not needed, as all the bindings are generated at runtime </li> </ul> See Also <ul> <li>window.webkit.messageHandlers</li> <li>JSON.stringify()</li> </ul> Source code in <code>wito/interface.py</code> <pre><code>class API(PythonJavaScriptBridge):\n    \"\"\" API Usage\n\n    This class creates a bridge between JavaScript and Python, allowing asynchronous \n    communication.\n\n    Example:\n        Basic usage:\n        ```python\n        # Initialize API\n        from wito.interface import API\n\n        class MyApp(API):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n\n            def method(self):\n                return \"Hello\"\n\n        ```\n\n    Javascript Example:\n        Using _invoke:\n        ```javascript\n        // Basic usage\n        try {\n            const result = await wito._invoke('method', []);\n            console.log(result);\n        } catch (error) {\n            console.error('Failed to get data:', error);\n        }\n\n        // With multiple arguments\n        const userData = await wito._invoke('save_user', [{\n            name: 'John',\n            age: '30'\n        }]);\n        ```\n\n    Notes:\n        - The method requires WebKit message handlers to be available\n        - The method requires the Python side to have a corresponding handler to be available\n        - Arguments must be JSON-serializable\n        - The callId is automatically incremented for each call\n        - Debug messages are logged if devMode is enabled\n        - Using _invoke from Javascript is not needed, as all the bindings are generated at runtime \n\n    See Also:\n        - window.webkit.messageHandlers\n        - JSON.stringify()\n    \"\"\"\n    num_cpus = max(os.cpu_count() or 1, 4) # Default to 4 if cpu_count() returns None\n    workers = min(num_cpus + 1, 16) # Use the number of CPU cores + 1, but cap it at 16\n    executor = ThreadPoolExecutor(workers)\n    # print(f\"Number of CPUs: {num_cpus}\")\n    def __init__(self, webview, window, version, wito_dev_mode):\n        super().__init__(webview, window, version, wito_dev_mode)\n\n    @staticmethod\n    def thread(func):\n        \"\"\"Decorator that runs a method in a separate Python thread.\n\n        This decorator executes the method in a new thread to prevent blocking\n        the main thread. Particularly useful for I/O operations or\n        long-running tasks.\n\n        Example:\n            ```python\n            class MyApp(API):\n                def __init__(self, *args, **kwargs):\n                    super().__init__(*args, **kwargs)\n\n                    @expose\n                    @thread  \n                    def long_operation(self):\n                        time.sleep(1)\n                        return {\"status\": \"completed\"}\n            ```\n\n        Note:\n            - Should be used for I/O or CPU-intensive operations\n            - When used with @expose, @thread must be the inner decorator\n        \"\"\"\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            def task():\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    return {\"error\": str(e)}\n\n            future = API.executor.submit(task)\n            return future\n\n        return wrapper\n\n    @staticmethod\n    def expose(func):\n        \"\"\"Decorator that exposes a Python objects to the JavaScript runtime.\n\n        Example:\n            ```python\n            class MyApp(API):\n                def __init__(self, *args, **kwargs):\n                    super().__init__(*args, **kwargs)\n                        self.my_property = my_value\n\n                        @expose\n                        def my_method(self, param):\n                            return {\"result\": param}\n\n                        @property # read only property.\n                        @expose  \n                        def my_property(self):\n                            return {\"result\": self.my_property}\n\n                        @my_property.setter # combine with above to turn it in a write property.\n                        @expose  \n                        def my_property(self, value):\n                            self.my_property = value\n                            return {\"success\": True}\n            ```\n\n        Note:\n            - All exposed methods become async in JavaScript\n            - Return values must be JSON-serializable\n            - Can be combined with @thread decorator\n        \"\"\"\n        func._exposed = True\n        return func\n\n    @expose\n    def get_theme_mode(self):\n        \"\"\"Get the current theme mode of the application.\n\n        Returns:\n            dict: Dictionary containing theme mode status\n                - is_dark (bool): True if dark theme is active\n                - is_light (bool): True if light theme is active\n\n        JavaScript Usage:\n            ```javascript\n            const theme = await wito.get_theme_mode();\n            console.log('Dark mode:', theme.is_dark);\n            console.log('Light mode:', theme.is_light);\n            ```\n        \"\"\"\n        settings = Gtk.Settings.get_default()\n        is_dark = settings.get_property(\"gtk-application-prefer-dark-theme\")\n        return {\n            \"is_dark\": is_dark,\n            \"is_light\": not is_dark\n        }\n\n    @expose\n    def screen_get_info(self):\n        from wito.screen import get_info\n\n        \"\"\"Get information about the current screen.\n\n        Returns:\n            dict: Information includes geometry, position, size and primary and secondary monitors.\n\n        JavaScript Usage:\n            ```javascript\n            const screenInfo = await wito.screen_get_info();\n            console.log('Screen info:', screenInfo);\n            ```\n        \"\"\"\n        return get_info(self.win)\n\n    @expose\n    def win_is_fullscreen(self):\n        \"\"\"Check if the window is in fullscreen mode.\n\n        Returns:\n            bool: True if window is fullscreen, False otherwise\n\n        JavaScript Usage:\n            ```javascript\n            const isFullscreen = await wito.win_is_fullscreen();\n            console.log('Is fullscreen:', isFullscreen);\n            ```\n        \"\"\"\n        return self.win.is_fullscreen()\n\n    @expose\n    def win_close(self):\n        \"\"\"Close the window.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_close();\n            ```\n        \"\"\"\n        return self.win.close()\n\n    @expose\n    def win_fullscreen(self):\n        \"\"\"Set the window to fullscreen mode.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_fullscreen();\n            ```\n        \"\"\"\n        self.win.fullscreen()\n\n    @expose\n    def win_unfullscreen(self):\n        \"\"\"Exit fullscreen mode.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_unfullscreen();\n            ```\n        \"\"\"\n        self.win.unfullscreen()\n\n    @expose\n    def win_get_focus(self):\n        \"\"\"Check if the window has focus..\n\n        JavaScript Usage:\n            ```javascript\n            const winGetfocus = await wito.win_get_focus();\n            ```\n        \"\"\"\n        self.win.get_focus()\n\n    @expose\n    def win_set_focus(self):\n        \"\"\"Set focus to the window.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_set_focus();\n            ```\n        \"\"\"\n        self.win.set_focus(self.view)\n\n    @expose\n    def win_set_title(self, title):\n        \"\"\"Set the window title.\n\n        Args:\n            title (str): The new title for the window\n\n        Returns:\n            dict: Status of the operation\n                - success (bool): True if title was set successfully\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_set_title('My App Title');\n            ```\n        \"\"\"\n        self.win.set_title(title)\n        return {\"success\": True}\n\n    @expose\n    def win_get_size(self):\n        \"\"\"Get the current window size.\n\n        Returns:\n            dict: Window dimensions\n                - width (int): Window width in pixels\n                - height (int): Window height in pixels\n\n        JavaScript Usage:\n            ```javascript\n            const size = await wito.win_get_size();\n            console.log(`Window size: ${size.width}x${size.height}`);\n            ```\n        \"\"\"\n        width, height = self.window.get_size()\n        return {\"width\": width, \"height\": height}\n\n    @expose\n    def win_set_size(self, width, height):\n        \"\"\"Set the window size.\n\n        Args:\n            width (int): Desired window width in pixels\n            height (int): Desired window height in pixels\n\n        Returns:\n            dict: Status of the operation\n                - success (bool): True if size was set successfully\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_set_size(800, 600);\n            ```\n        \"\"\"\n        self.window.resize(width, height)\n        return {\"success\": True}\n\n    @expose\n    def fs_get_app_path(self):\n        \"\"\"Get the application's base path.\n\n        Returns:\n            dict: Application path information\n                - path (str): The base path of the application\n\n        JavaScript Usage:\n            ```javascript\n            const appPath = await wito.fs_get_app_path();\n            console.log('App path:', appPath.path);\n            ```\n        \"\"\"\n        return {\"path\": app_base_path()}\n\n    @expose\n    @thread\n    def fs_list_dir(self, path):\n        \"\"\"List contents of a directory.\n\n        Args:\n            path (str): Path to the directory to list\n\n        Returns:\n            dict: Directory contents\n                - contents (Liststr): List of file/directory names\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_list_dir('/path/to/directory');\n            if (result.contents) {\n                console.log('Directory contents:', result.contents);\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            return {\"contents\": [str(p.name) for p in Path(path).iterdir()]}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    def fs_create_dir(self, path):\n        \"\"\"Create a new directory.\n\n        Args:\n            path (str): Path where to create the directory\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if directory was created\n                - path (str): Absolute path of created directory\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_create_dir('/path/to/new/directory');\n            if (result.success) {\n                console.log('Created directory at:', result.path);\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            Path(path).mkdir(parents=True, exist_ok=True)\n            return {\"success\": True, \"path\": str(Path(path).resolve())}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    @thread\n    def fs_del_file(self, path):\n        \"\"\"Delete a file.\n\n        Args:\n            path (str): Path to the file to delete\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if file was deleted\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_del_file('/path/to/file.txt');\n            if (result.success) {\n                console.log('File deleted successfully');\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            Path(path).unlink()\n            return {\"success\": True}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    @thread\n    def fs_read_file(self, path):\n        \"\"\"Read contents of a file.\n\n        Args:\n            path (str): Path to the file to read\n\n        Returns:\n            dict: File contents or error\n                - content (str): The contents of the file\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_read_file('/path/to/file.txt');\n            if (result.content) {\n                console.log('File contents:', result.content);\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            return {\"content\": Path(path).read_text()}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    @thread\n    def fs_save_file(self, path, content):\n        \"\"\"Write content to a file.\n\n        Args:\n            path (str): Path to the file to write\n            content (str): Content to write to the file\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if file was written successfully\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_save_file('/path/to/file.txt', 'Hello World!');\n            if (result.success) {\n                console.log('File written successfully');\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            Path(path).write_text(content)\n            return {\"success\": True}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    def fs_file_exists(self, path):\n        \"\"\"Check if a file or directory exists.\n\n        Args:\n            path (str): Path to check\n\n        Returns:\n            dict: Check result\n                - exists (bool): True if path exists\n                - is_file (bool): True if path is a file\n                - is_dir (bool): True if path is a directory\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_file_exists('/path/to/check');\n            if (result.exists) {\n                console.log('Path exists');\n                console.log('Is file:', result.is_file);\n                console.log('Is directory:', result.is_dir);\n            }\n            ```\n        \"\"\"\n        try:\n            path_obj = Path(path)\n            exists = path_obj.exists()\n            return {\n                \"exists\": exists,\n                \"is_file\": exists and path_obj.is_file(),\n                \"is_dir\": exists and path_obj.is_dir()\n            }\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    def notify(self, title, body, priority='normal'):\n        from wito.notifications import notify\n\n        \"\"\"Show a system notification.\n\n        Args:\n            title (str): Title of the notification\n            body (str): Body text of the notification\n            priority (str, optional): Priority level ('low', 'normal', 'high'). Defaults to 'normal'\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if notification was shown successfully\n\n        JavaScript Usage:\n            ```javascript\n            await wito.notify('Hello', 'This is a notification', 'normal');\n            ```\n        \"\"\"\n        notify(self.win, title, body, priority)\n        return {\"success\": True}\n</code></pre> Functions emit_event <pre><code>emit_event(event, data)\n</code></pre> <p>Emits an event to the JavaScript layer with associated data.</p> <p>This method bridges Python and JavaScript by triggering events in the JavaScript environment. It serializes the Python data to JSON and calls the JavaScript _emitEvent method.</p> PARAMETER DESCRIPTION <code>event</code> <p>The name of the event to emit.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to pass with the event. Must be JSON-serializable.</p> <p> TYPE: <code>Any</code> </p> RAISES DESCRIPTION <code>TypeError</code> <p>If data cannot be serialized to JSON.</p> <code>ValueError</code> <p>If event name contains invalid characters.</p> Example <pre><code># Simple event with string data\ninterface.emit_event('user_logged_in', 'John Doe')\n\n# Event with dictionary data\ninterface.emit_event('data_updated', {\n    'id': 123,\n    'status': 'complete',\n    'timestamp': '2023-01-01'\n})\n\n# Event with list data\ninterface.emit_event('items_changed', [1, 2, 3, 4])\n</code></pre> Note <ul> <li>The data must be JSON-serializable</li> <li>Event names should follow JavaScript naming conventions</li> <li>The JavaScript layer must have the _emitEvent method defined</li> <li>Large data structures may impact performance</li> </ul> See Also <ul> <li>eval_js: Method used to execute JavaScript code</li> <li>json.dumps: JSON serialization method</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def emit_event(self, event, data):\n    \"\"\"\n    Emits an event to the JavaScript layer with associated data.\n\n    This method bridges Python and JavaScript by triggering events in the JavaScript\n    environment. It serializes the Python data to JSON and calls the JavaScript\n    _emitEvent method.\n\n    Args:\n        event (str): The name of the event to emit.\n        data (Any): The data to pass with the event. Must be JSON-serializable.\n\n    Raises:\n        TypeError: If data cannot be serialized to JSON.\n        ValueError: If event name contains invalid characters.\n\n    Example:\n        ```python\n        # Simple event with string data\n        interface.emit_event('user_logged_in', 'John Doe')\n\n        # Event with dictionary data\n        interface.emit_event('data_updated', {\n            'id': 123,\n            'status': 'complete',\n            'timestamp': '2023-01-01'\n        })\n\n        # Event with list data\n        interface.emit_event('items_changed', [1, 2, 3, 4])\n        ```\n\n    Note:\n        - The data must be JSON-serializable\n        - Event names should follow JavaScript naming conventions\n        - The JavaScript layer must have the _emitEvent method defined\n        - Large data structures may impact performance\n\n    See Also:\n        - eval_js: Method used to execute JavaScript code\n        - json.dumps: JSON serialization method\n    \"\"\"\n    js = f\"wito._emitEvent('{event}', {json.dumps(data)})\"\n    self.eval_js(js)\n</code></pre> theme_emit_change_event <pre><code>theme_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about desktop theme mode changes.</p> <p>Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('isDarkTheme', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Note <ul> <li>This event automatically gets subscribed to when the bridge is instantiated.</li> <li>The event automatically adds light-theme or dark-theme classes to document body.</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def theme_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about desktop theme mode changes.\n\n    Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('isDarkTheme', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n\n    Note:\n        - This event automatically gets subscribed to when the bridge is instantiated.\n        - The event automatically adds light-theme or dark-theme classes to document body.\n    \"\"\"\n    js = \"wito._emitEvent('isDarkTheme', {})\"\n    self.eval_js(js)\n</code></pre> screen_emit_change_event <pre><code>screen_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about screen configuration changes.</p> <p>Evaluates JavaScript code that triggers a 'screenChange' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('screenChange', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Source code in <code>wito/bridge.py</code> <pre><code>def screen_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about screen configuration changes.\n\n    Evaluates JavaScript code that triggers a 'screenChange' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('screenChange', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n    \"\"\"\n    js = \"wito._emitEvent('screenChange', {})\"\n    self.eval_js(js)\n</code></pre> thread <code>staticmethod</code> <pre><code>thread(func)\n</code></pre> <p>Decorator that runs a method in a separate Python thread.</p> <p>This decorator executes the method in a new thread to prevent blocking the main thread. Particularly useful for I/O operations or long-running tasks.</p> Example <pre><code>class MyApp(API):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        @expose\n        @thread  \n        def long_operation(self):\n            time.sleep(1)\n            return {\"status\": \"completed\"}\n</code></pre> Note <ul> <li>Should be used for I/O or CPU-intensive operations</li> <li>When used with @expose, @thread must be the inner decorator</li> </ul> Source code in <code>wito/interface.py</code> <pre><code>@staticmethod\ndef thread(func):\n    \"\"\"Decorator that runs a method in a separate Python thread.\n\n    This decorator executes the method in a new thread to prevent blocking\n    the main thread. Particularly useful for I/O operations or\n    long-running tasks.\n\n    Example:\n        ```python\n        class MyApp(API):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n\n                @expose\n                @thread  \n                def long_operation(self):\n                    time.sleep(1)\n                    return {\"status\": \"completed\"}\n        ```\n\n    Note:\n        - Should be used for I/O or CPU-intensive operations\n        - When used with @expose, @thread must be the inner decorator\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        def task():\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                return {\"error\": str(e)}\n\n        future = API.executor.submit(task)\n        return future\n\n    return wrapper\n</code></pre> expose <code>staticmethod</code> <pre><code>expose(func)\n</code></pre> <p>Decorator that exposes a Python objects to the JavaScript runtime.</p> Example <pre><code>class MyApp(API):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n            self.my_property = my_value\n\n            @expose\n            def my_method(self, param):\n                return {\"result\": param}\n\n            @property # read only property.\n            @expose  \n            def my_property(self):\n                return {\"result\": self.my_property}\n\n            @my_property.setter # combine with above to turn it in a write property.\n            @expose  \n            def my_property(self, value):\n                self.my_property = value\n                return {\"success\": True}\n</code></pre> Note <ul> <li>All exposed methods become async in JavaScript</li> <li>Return values must be JSON-serializable</li> <li>Can be combined with @thread decorator</li> </ul> Source code in <code>wito/interface.py</code> <pre><code>@staticmethod\ndef expose(func):\n    \"\"\"Decorator that exposes a Python objects to the JavaScript runtime.\n\n    Example:\n        ```python\n        class MyApp(API):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                    self.my_property = my_value\n\n                    @expose\n                    def my_method(self, param):\n                        return {\"result\": param}\n\n                    @property # read only property.\n                    @expose  \n                    def my_property(self):\n                        return {\"result\": self.my_property}\n\n                    @my_property.setter # combine with above to turn it in a write property.\n                    @expose  \n                    def my_property(self, value):\n                        self.my_property = value\n                        return {\"success\": True}\n        ```\n\n    Note:\n        - All exposed methods become async in JavaScript\n        - Return values must be JSON-serializable\n        - Can be combined with @thread decorator\n    \"\"\"\n    func._exposed = True\n    return func\n</code></pre> get_theme_mode <pre><code>get_theme_mode()\n</code></pre> <p>Get the current theme mode of the application.</p> RETURNS DESCRIPTION <code>dict</code> <p>Dictionary containing theme mode status - is_dark (bool): True if dark theme is active - is_light (bool): True if light theme is active</p> JavaScript Usage <pre><code>const theme = await wito.get_theme_mode();\nconsole.log('Dark mode:', theme.is_dark);\nconsole.log('Light mode:', theme.is_light);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef get_theme_mode(self):\n    \"\"\"Get the current theme mode of the application.\n\n    Returns:\n        dict: Dictionary containing theme mode status\n            - is_dark (bool): True if dark theme is active\n            - is_light (bool): True if light theme is active\n\n    JavaScript Usage:\n        ```javascript\n        const theme = await wito.get_theme_mode();\n        console.log('Dark mode:', theme.is_dark);\n        console.log('Light mode:', theme.is_light);\n        ```\n    \"\"\"\n    settings = Gtk.Settings.get_default()\n    is_dark = settings.get_property(\"gtk-application-prefer-dark-theme\")\n    return {\n        \"is_dark\": is_dark,\n        \"is_light\": not is_dark\n    }\n</code></pre> win_is_fullscreen <pre><code>win_is_fullscreen()\n</code></pre> <p>Check if the window is in fullscreen mode.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if window is fullscreen, False otherwise</p> JavaScript Usage <pre><code>const isFullscreen = await wito.win_is_fullscreen();\nconsole.log('Is fullscreen:', isFullscreen);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_is_fullscreen(self):\n    \"\"\"Check if the window is in fullscreen mode.\n\n    Returns:\n        bool: True if window is fullscreen, False otherwise\n\n    JavaScript Usage:\n        ```javascript\n        const isFullscreen = await wito.win_is_fullscreen();\n        console.log('Is fullscreen:', isFullscreen);\n        ```\n    \"\"\"\n    return self.win.is_fullscreen()\n</code></pre> win_close <pre><code>win_close()\n</code></pre> <p>Close the window.</p> JavaScript Usage <pre><code>await wito.win_close();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_close(self):\n    \"\"\"Close the window.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_close();\n        ```\n    \"\"\"\n    return self.win.close()\n</code></pre> win_fullscreen <pre><code>win_fullscreen()\n</code></pre> <p>Set the window to fullscreen mode.</p> JavaScript Usage <pre><code>await wito.win_fullscreen();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_fullscreen(self):\n    \"\"\"Set the window to fullscreen mode.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_fullscreen();\n        ```\n    \"\"\"\n    self.win.fullscreen()\n</code></pre> win_unfullscreen <pre><code>win_unfullscreen()\n</code></pre> <p>Exit fullscreen mode.</p> JavaScript Usage <pre><code>await wito.win_unfullscreen();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_unfullscreen(self):\n    \"\"\"Exit fullscreen mode.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_unfullscreen();\n        ```\n    \"\"\"\n    self.win.unfullscreen()\n</code></pre> win_get_focus <pre><code>win_get_focus()\n</code></pre> <p>Check if the window has focus..</p> JavaScript Usage <pre><code>const winGetfocus = await wito.win_get_focus();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_get_focus(self):\n    \"\"\"Check if the window has focus..\n\n    JavaScript Usage:\n        ```javascript\n        const winGetfocus = await wito.win_get_focus();\n        ```\n    \"\"\"\n    self.win.get_focus()\n</code></pre> win_set_focus <pre><code>win_set_focus()\n</code></pre> <p>Set focus to the window.</p> JavaScript Usage <pre><code>await wito.win_set_focus();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_set_focus(self):\n    \"\"\"Set focus to the window.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_set_focus();\n        ```\n    \"\"\"\n    self.win.set_focus(self.view)\n</code></pre> win_set_title <pre><code>win_set_title(title)\n</code></pre> <p>Set the window title.</p> PARAMETER DESCRIPTION <code>title</code> <p>The new title for the window</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Status of the operation - success (bool): True if title was set successfully</p> JavaScript Usage <pre><code>await wito.win_set_title('My App Title');\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_set_title(self, title):\n    \"\"\"Set the window title.\n\n    Args:\n        title (str): The new title for the window\n\n    Returns:\n        dict: Status of the operation\n            - success (bool): True if title was set successfully\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_set_title('My App Title');\n        ```\n    \"\"\"\n    self.win.set_title(title)\n    return {\"success\": True}\n</code></pre> win_get_size <pre><code>win_get_size()\n</code></pre> <p>Get the current window size.</p> RETURNS DESCRIPTION <code>dict</code> <p>Window dimensions - width (int): Window width in pixels - height (int): Window height in pixels</p> JavaScript Usage <pre><code>const size = await wito.win_get_size();\nconsole.log(`Window size: ${size.width}x${size.height}`);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_get_size(self):\n    \"\"\"Get the current window size.\n\n    Returns:\n        dict: Window dimensions\n            - width (int): Window width in pixels\n            - height (int): Window height in pixels\n\n    JavaScript Usage:\n        ```javascript\n        const size = await wito.win_get_size();\n        console.log(`Window size: ${size.width}x${size.height}`);\n        ```\n    \"\"\"\n    width, height = self.window.get_size()\n    return {\"width\": width, \"height\": height}\n</code></pre> win_set_size <pre><code>win_set_size(width, height)\n</code></pre> <p>Set the window size.</p> PARAMETER DESCRIPTION <code>width</code> <p>Desired window width in pixels</p> <p> TYPE: <code>int</code> </p> <code>height</code> <p>Desired window height in pixels</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Status of the operation - success (bool): True if size was set successfully</p> JavaScript Usage <pre><code>await wito.win_set_size(800, 600);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_set_size(self, width, height):\n    \"\"\"Set the window size.\n\n    Args:\n        width (int): Desired window width in pixels\n        height (int): Desired window height in pixels\n\n    Returns:\n        dict: Status of the operation\n            - success (bool): True if size was set successfully\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_set_size(800, 600);\n        ```\n    \"\"\"\n    self.window.resize(width, height)\n    return {\"success\": True}\n</code></pre> fs_get_app_path <pre><code>fs_get_app_path()\n</code></pre> <p>Get the application's base path.</p> RETURNS DESCRIPTION <code>dict</code> <p>Application path information - path (str): The base path of the application</p> JavaScript Usage <pre><code>const appPath = await wito.fs_get_app_path();\nconsole.log('App path:', appPath.path);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef fs_get_app_path(self):\n    \"\"\"Get the application's base path.\n\n    Returns:\n        dict: Application path information\n            - path (str): The base path of the application\n\n    JavaScript Usage:\n        ```javascript\n        const appPath = await wito.fs_get_app_path();\n        console.log('App path:', appPath.path);\n        ```\n    \"\"\"\n    return {\"path\": app_base_path()}\n</code></pre> fs_list_dir <pre><code>fs_list_dir(path)\n</code></pre> <p>List contents of a directory.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the directory to list</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Directory contents - contents (Liststr): List of file/directory names - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_list_dir('/path/to/directory');\nif (result.contents) {\n    console.log('Directory contents:', result.contents);\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_list_dir(self, path):\n    \"\"\"List contents of a directory.\n\n    Args:\n        path (str): Path to the directory to list\n\n    Returns:\n        dict: Directory contents\n            - contents (Liststr): List of file/directory names\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_list_dir('/path/to/directory');\n        if (result.contents) {\n            console.log('Directory contents:', result.contents);\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        return {\"contents\": [str(p.name) for p in Path(path).iterdir()]}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_create_dir <pre><code>fs_create_dir(path)\n</code></pre> <p>Create a new directory.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path where to create the directory</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Operation result - success (bool): True if directory was created - path (str): Absolute path of created directory - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_create_dir('/path/to/new/directory');\nif (result.success) {\n    console.log('Created directory at:', result.path);\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef fs_create_dir(self, path):\n    \"\"\"Create a new directory.\n\n    Args:\n        path (str): Path where to create the directory\n\n    Returns:\n        dict: Operation result\n            - success (bool): True if directory was created\n            - path (str): Absolute path of created directory\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_create_dir('/path/to/new/directory');\n        if (result.success) {\n            console.log('Created directory at:', result.path);\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        Path(path).mkdir(parents=True, exist_ok=True)\n        return {\"success\": True, \"path\": str(Path(path).resolve())}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_del_file <pre><code>fs_del_file(path)\n</code></pre> <p>Delete a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the file to delete</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Operation result - success (bool): True if file was deleted - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_del_file('/path/to/file.txt');\nif (result.success) {\n    console.log('File deleted successfully');\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_del_file(self, path):\n    \"\"\"Delete a file.\n\n    Args:\n        path (str): Path to the file to delete\n\n    Returns:\n        dict: Operation result\n            - success (bool): True if file was deleted\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_del_file('/path/to/file.txt');\n        if (result.success) {\n            console.log('File deleted successfully');\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        Path(path).unlink()\n        return {\"success\": True}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_read_file <pre><code>fs_read_file(path)\n</code></pre> <p>Read contents of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the file to read</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>File contents or error - content (str): The contents of the file - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_read_file('/path/to/file.txt');\nif (result.content) {\n    console.log('File contents:', result.content);\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_read_file(self, path):\n    \"\"\"Read contents of a file.\n\n    Args:\n        path (str): Path to the file to read\n\n    Returns:\n        dict: File contents or error\n            - content (str): The contents of the file\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_read_file('/path/to/file.txt');\n        if (result.content) {\n            console.log('File contents:', result.content);\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        return {\"content\": Path(path).read_text()}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_save_file <pre><code>fs_save_file(path, content)\n</code></pre> <p>Write content to a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the file to write</p> <p> TYPE: <code>str</code> </p> <code>content</code> <p>Content to write to the file</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Operation result - success (bool): True if file was written successfully - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_save_file('/path/to/file.txt', 'Hello World!');\nif (result.success) {\n    console.log('File written successfully');\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_save_file(self, path, content):\n    \"\"\"Write content to a file.\n\n    Args:\n        path (str): Path to the file to write\n        content (str): Content to write to the file\n\n    Returns:\n        dict: Operation result\n            - success (bool): True if file was written successfully\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_save_file('/path/to/file.txt', 'Hello World!');\n        if (result.success) {\n            console.log('File written successfully');\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        Path(path).write_text(content)\n        return {\"success\": True}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_file_exists <pre><code>fs_file_exists(path)\n</code></pre> <p>Check if a file or directory exists.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to check</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Check result - exists (bool): True if path exists - is_file (bool): True if path is a file - is_dir (bool): True if path is a directory - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_file_exists('/path/to/check');\nif (result.exists) {\n    console.log('Path exists');\n    console.log('Is file:', result.is_file);\n    console.log('Is directory:', result.is_dir);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef fs_file_exists(self, path):\n    \"\"\"Check if a file or directory exists.\n\n    Args:\n        path (str): Path to check\n\n    Returns:\n        dict: Check result\n            - exists (bool): True if path exists\n            - is_file (bool): True if path is a file\n            - is_dir (bool): True if path is a directory\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_file_exists('/path/to/check');\n        if (result.exists) {\n            console.log('Path exists');\n            console.log('Is file:', result.is_file);\n            console.log('Is directory:', result.is_dir);\n        }\n        ```\n    \"\"\"\n    try:\n        path_obj = Path(path)\n        exists = path_obj.exists()\n        return {\n            \"exists\": exists,\n            \"is_file\": exists and path_obj.is_file(),\n            \"is_dir\": exists and path_obj.is_dir()\n        }\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"reference/wito/#wito.utils","title":"utils","text":""},{"location":"reference/wito/#wito.utils-functions","title":"Functions","text":"load_config <pre><code>load_config()\n</code></pre> <p>Load application configuration from a JSON file located in the same directory as the HTML file.</p> Source code in <code>wito/utils.py</code> <pre><code>def load_config():\n    \"\"\"Load application configuration from a JSON file located in the same directory as the HTML file.\"\"\"\n    config_file = app_base_path() + '/wito-config.json'\n    if not os.path.exists(config_file):\n        raise FileNotFoundError(f\"Configuration file '{config_file}' not found.\")\n\n    with open(config_file, 'r') as f:\n        config = json.load(f)\n\n    return config\n</code></pre>"},{"location":"reference/wito/#wito.window","title":"window","text":""},{"location":"reference/wito/#wito.window-classes","title":"Classes","text":"Window <p>               Bases: <code>ApplicationWindow</code></p> Source code in <code>wito/window.py</code> <pre><code>class Window(Gtk.ApplicationWindow):\n    def __init__(self, *args, extended_api, config, application, **kwargs):\n        win_config = config.get(\"window\")\n        super().__init__(*args, application=application, **kwargs)\n\n        self.app = application\n        self.webview = webview(self, extended_api, config.get(\"wito\"))\n        self.set_default_size(\n            win_config.get(\"width\"),\n            win_config.get(\"height\"))\n\n        if win_config.get(\"isResizable\"):\n            self.set_resizable(win_config.get(\"isResizable\", True))\n\n        if win_config.get(\"isFullScreen\"):\n            self.fullscreen()\n        elif win_config.get(\"isMaximized\"):\n            self.maximize()\n\n        self.set_title(win_config.get(\"title\"))\n        self.set_child(self.webview)\n        self.connect(\"close-request\", self.on_close_request)\n        self.connect('realize', self.on_realize)\n        self.cleanup()\n        self.present()\n\n\n    def cleanup(self):\n        del self.webview\n\n    def on_realize(self, widget):\n        # seems on wayland windows cannot be centered\n        self.present()\n\n    def on_close_request(self, *args):\n        \"\"\"Handle the window close request by destroying the window.\"\"\"\n        self.destroy()\n        if self.app:\n            self.app.quit()\n        else:\n            print(\"Warning: Application reference not found. Unable to quit the application.\")\n        return True \n\n    def show(self):\n        super().show()\n</code></pre> Functions on_close_request <pre><code>on_close_request(*args)\n</code></pre> <p>Handle the window close request by destroying the window.</p> Source code in <code>wito/window.py</code> <pre><code>def on_close_request(self, *args):\n    \"\"\"Handle the window close request by destroying the window.\"\"\"\n    self.destroy()\n    if self.app:\n        self.app.quit()\n    else:\n        print(\"Warning: Application reference not found. Unable to quit the application.\")\n    return True \n</code></pre>"},{"location":"reference/wito/application/","title":"Application","text":""},{"location":"reference/wito/application/#wito.application","title":"wito.application","text":""},{"location":"reference/wito/application/#wito.application-classes","title":"Classes","text":""},{"location":"reference/wito/application/#wito.application-functions","title":"Functions","text":""},{"location":"reference/wito/core/","title":"Core","text":""},{"location":"reference/wito/core/#wito.core","title":"wito.core","text":""},{"location":"reference/wito/core/#wito.core-classes","title":"Classes","text":""},{"location":"reference/wito/core/#wito.core-functions","title":"Functions","text":""},{"location":"reference/wito/file_watcher/","title":"File watcher","text":""},{"location":"reference/wito/file_watcher/#wito.file_watcher","title":"wito.file_watcher","text":""},{"location":"reference/wito/interface/","title":"Interface Documentation","text":""},{"location":"reference/wito/interface/#python-interface","title":"Python Interface","text":""},{"location":"reference/wito/interface/#wito.interface","title":"wito.interface","text":""},{"location":"reference/wito/interface/#wito.interface-classes","title":"Classes","text":""},{"location":"reference/wito/interface/#wito.interface.API","title":"API","text":"<p>               Bases: <code>PythonJavaScriptBridge</code></p> <p>API Usage</p> <p>This class creates a bridge between JavaScript and Python, allowing asynchronous  communication.</p> Example <p>Basic usage: <pre><code># Initialize API\nfrom wito.interface import API\n\nclass MyApp(API):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def method(self):\n        return \"Hello\"\n</code></pre></p> Javascript Example <p>Using _invoke: <pre><code>// Basic usage\ntry {\n    const result = await wito._invoke('method', []);\n    console.log(result);\n} catch (error) {\n    console.error('Failed to get data:', error);\n}\n\n// With multiple arguments\nconst userData = await wito._invoke('save_user', [{\n    name: 'John',\n    age: '30'\n}]);\n</code></pre></p> Notes <ul> <li>The method requires WebKit message handlers to be available</li> <li>The method requires the Python side to have a corresponding handler to be available</li> <li>Arguments must be JSON-serializable</li> <li>The callId is automatically incremented for each call</li> <li>Debug messages are logged if devMode is enabled</li> <li>Using _invoke from Javascript is not needed, as all the bindings are generated at runtime </li> </ul> See Also <ul> <li>window.webkit.messageHandlers</li> <li>JSON.stringify()</li> </ul> Source code in <code>wito/interface.py</code> <pre><code>class API(PythonJavaScriptBridge):\n    \"\"\" API Usage\n\n    This class creates a bridge between JavaScript and Python, allowing asynchronous \n    communication.\n\n    Example:\n        Basic usage:\n        ```python\n        # Initialize API\n        from wito.interface import API\n\n        class MyApp(API):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n\n            def method(self):\n                return \"Hello\"\n\n        ```\n\n    Javascript Example:\n        Using _invoke:\n        ```javascript\n        // Basic usage\n        try {\n            const result = await wito._invoke('method', []);\n            console.log(result);\n        } catch (error) {\n            console.error('Failed to get data:', error);\n        }\n\n        // With multiple arguments\n        const userData = await wito._invoke('save_user', [{\n            name: 'John',\n            age: '30'\n        }]);\n        ```\n\n    Notes:\n        - The method requires WebKit message handlers to be available\n        - The method requires the Python side to have a corresponding handler to be available\n        - Arguments must be JSON-serializable\n        - The callId is automatically incremented for each call\n        - Debug messages are logged if devMode is enabled\n        - Using _invoke from Javascript is not needed, as all the bindings are generated at runtime \n\n    See Also:\n        - window.webkit.messageHandlers\n        - JSON.stringify()\n    \"\"\"\n    num_cpus = max(os.cpu_count() or 1, 4) # Default to 4 if cpu_count() returns None\n    workers = min(num_cpus + 1, 16) # Use the number of CPU cores + 1, but cap it at 16\n    executor = ThreadPoolExecutor(workers)\n    # print(f\"Number of CPUs: {num_cpus}\")\n    def __init__(self, webview, window, version, wito_dev_mode):\n        super().__init__(webview, window, version, wito_dev_mode)\n\n    @staticmethod\n    def thread(func):\n        \"\"\"Decorator that runs a method in a separate Python thread.\n\n        This decorator executes the method in a new thread to prevent blocking\n        the main thread. Particularly useful for I/O operations or\n        long-running tasks.\n\n        Example:\n            ```python\n            class MyApp(API):\n                def __init__(self, *args, **kwargs):\n                    super().__init__(*args, **kwargs)\n\n                    @expose\n                    @thread  \n                    def long_operation(self):\n                        time.sleep(1)\n                        return {\"status\": \"completed\"}\n            ```\n\n        Note:\n            - Should be used for I/O or CPU-intensive operations\n            - When used with @expose, @thread must be the inner decorator\n        \"\"\"\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            def task():\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    return {\"error\": str(e)}\n\n            future = API.executor.submit(task)\n            return future\n\n        return wrapper\n\n    @staticmethod\n    def expose(func):\n        \"\"\"Decorator that exposes a Python objects to the JavaScript runtime.\n\n        Example:\n            ```python\n            class MyApp(API):\n                def __init__(self, *args, **kwargs):\n                    super().__init__(*args, **kwargs)\n                        self.my_property = my_value\n\n                        @expose\n                        def my_method(self, param):\n                            return {\"result\": param}\n\n                        @property # read only property.\n                        @expose  \n                        def my_property(self):\n                            return {\"result\": self.my_property}\n\n                        @my_property.setter # combine with above to turn it in a write property.\n                        @expose  \n                        def my_property(self, value):\n                            self.my_property = value\n                            return {\"success\": True}\n            ```\n\n        Note:\n            - All exposed methods become async in JavaScript\n            - Return values must be JSON-serializable\n            - Can be combined with @thread decorator\n        \"\"\"\n        func._exposed = True\n        return func\n\n    @expose\n    def get_theme_mode(self):\n        \"\"\"Get the current theme mode of the application.\n\n        Returns:\n            dict: Dictionary containing theme mode status\n                - is_dark (bool): True if dark theme is active\n                - is_light (bool): True if light theme is active\n\n        JavaScript Usage:\n            ```javascript\n            const theme = await wito.get_theme_mode();\n            console.log('Dark mode:', theme.is_dark);\n            console.log('Light mode:', theme.is_light);\n            ```\n        \"\"\"\n        settings = Gtk.Settings.get_default()\n        is_dark = settings.get_property(\"gtk-application-prefer-dark-theme\")\n        return {\n            \"is_dark\": is_dark,\n            \"is_light\": not is_dark\n        }\n\n    @expose\n    def screen_get_info(self):\n        from wito.screen import get_info\n\n        \"\"\"Get information about the current screen.\n\n        Returns:\n            dict: Information includes geometry, position, size and primary and secondary monitors.\n\n        JavaScript Usage:\n            ```javascript\n            const screenInfo = await wito.screen_get_info();\n            console.log('Screen info:', screenInfo);\n            ```\n        \"\"\"\n        return get_info(self.win)\n\n    @expose\n    def win_is_fullscreen(self):\n        \"\"\"Check if the window is in fullscreen mode.\n\n        Returns:\n            bool: True if window is fullscreen, False otherwise\n\n        JavaScript Usage:\n            ```javascript\n            const isFullscreen = await wito.win_is_fullscreen();\n            console.log('Is fullscreen:', isFullscreen);\n            ```\n        \"\"\"\n        return self.win.is_fullscreen()\n\n    @expose\n    def win_close(self):\n        \"\"\"Close the window.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_close();\n            ```\n        \"\"\"\n        return self.win.close()\n\n    @expose\n    def win_fullscreen(self):\n        \"\"\"Set the window to fullscreen mode.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_fullscreen();\n            ```\n        \"\"\"\n        self.win.fullscreen()\n\n    @expose\n    def win_unfullscreen(self):\n        \"\"\"Exit fullscreen mode.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_unfullscreen();\n            ```\n        \"\"\"\n        self.win.unfullscreen()\n\n    @expose\n    def win_get_focus(self):\n        \"\"\"Check if the window has focus..\n\n        JavaScript Usage:\n            ```javascript\n            const winGetfocus = await wito.win_get_focus();\n            ```\n        \"\"\"\n        self.win.get_focus()\n\n    @expose\n    def win_set_focus(self):\n        \"\"\"Set focus to the window.\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_set_focus();\n            ```\n        \"\"\"\n        self.win.set_focus(self.view)\n\n    @expose\n    def win_set_title(self, title):\n        \"\"\"Set the window title.\n\n        Args:\n            title (str): The new title for the window\n\n        Returns:\n            dict: Status of the operation\n                - success (bool): True if title was set successfully\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_set_title('My App Title');\n            ```\n        \"\"\"\n        self.win.set_title(title)\n        return {\"success\": True}\n\n    @expose\n    def win_get_size(self):\n        \"\"\"Get the current window size.\n\n        Returns:\n            dict: Window dimensions\n                - width (int): Window width in pixels\n                - height (int): Window height in pixels\n\n        JavaScript Usage:\n            ```javascript\n            const size = await wito.win_get_size();\n            console.log(`Window size: ${size.width}x${size.height}`);\n            ```\n        \"\"\"\n        width, height = self.window.get_size()\n        return {\"width\": width, \"height\": height}\n\n    @expose\n    def win_set_size(self, width, height):\n        \"\"\"Set the window size.\n\n        Args:\n            width (int): Desired window width in pixels\n            height (int): Desired window height in pixels\n\n        Returns:\n            dict: Status of the operation\n                - success (bool): True if size was set successfully\n\n        JavaScript Usage:\n            ```javascript\n            await wito.win_set_size(800, 600);\n            ```\n        \"\"\"\n        self.window.resize(width, height)\n        return {\"success\": True}\n\n    @expose\n    def fs_get_app_path(self):\n        \"\"\"Get the application's base path.\n\n        Returns:\n            dict: Application path information\n                - path (str): The base path of the application\n\n        JavaScript Usage:\n            ```javascript\n            const appPath = await wito.fs_get_app_path();\n            console.log('App path:', appPath.path);\n            ```\n        \"\"\"\n        return {\"path\": app_base_path()}\n\n    @expose\n    @thread\n    def fs_list_dir(self, path):\n        \"\"\"List contents of a directory.\n\n        Args:\n            path (str): Path to the directory to list\n\n        Returns:\n            dict: Directory contents\n                - contents (Liststr): List of file/directory names\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_list_dir('/path/to/directory');\n            if (result.contents) {\n                console.log('Directory contents:', result.contents);\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            return {\"contents\": [str(p.name) for p in Path(path).iterdir()]}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    def fs_create_dir(self, path):\n        \"\"\"Create a new directory.\n\n        Args:\n            path (str): Path where to create the directory\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if directory was created\n                - path (str): Absolute path of created directory\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_create_dir('/path/to/new/directory');\n            if (result.success) {\n                console.log('Created directory at:', result.path);\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            Path(path).mkdir(parents=True, exist_ok=True)\n            return {\"success\": True, \"path\": str(Path(path).resolve())}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    @thread\n    def fs_del_file(self, path):\n        \"\"\"Delete a file.\n\n        Args:\n            path (str): Path to the file to delete\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if file was deleted\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_del_file('/path/to/file.txt');\n            if (result.success) {\n                console.log('File deleted successfully');\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            Path(path).unlink()\n            return {\"success\": True}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    @thread\n    def fs_read_file(self, path):\n        \"\"\"Read contents of a file.\n\n        Args:\n            path (str): Path to the file to read\n\n        Returns:\n            dict: File contents or error\n                - content (str): The contents of the file\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_read_file('/path/to/file.txt');\n            if (result.content) {\n                console.log('File contents:', result.content);\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            return {\"content\": Path(path).read_text()}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    @thread\n    def fs_save_file(self, path, content):\n        \"\"\"Write content to a file.\n\n        Args:\n            path (str): Path to the file to write\n            content (str): Content to write to the file\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if file was written successfully\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_save_file('/path/to/file.txt', 'Hello World!');\n            if (result.success) {\n                console.log('File written successfully');\n            } else {\n                console.error('Error:', result.error);\n            }\n            ```\n        \"\"\"\n        try:\n            Path(path).write_text(content)\n            return {\"success\": True}\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    def fs_file_exists(self, path):\n        \"\"\"Check if a file or directory exists.\n\n        Args:\n            path (str): Path to check\n\n        Returns:\n            dict: Check result\n                - exists (bool): True if path exists\n                - is_file (bool): True if path is a file\n                - is_dir (bool): True if path is a directory\n                - error (str, optional): Error message if operation failed\n\n        JavaScript Usage:\n            ```javascript\n            const result = await wito.fs_file_exists('/path/to/check');\n            if (result.exists) {\n                console.log('Path exists');\n                console.log('Is file:', result.is_file);\n                console.log('Is directory:', result.is_dir);\n            }\n            ```\n        \"\"\"\n        try:\n            path_obj = Path(path)\n            exists = path_obj.exists()\n            return {\n                \"exists\": exists,\n                \"is_file\": exists and path_obj.is_file(),\n                \"is_dir\": exists and path_obj.is_dir()\n            }\n        except OSError as e:\n            return {\"error\": str(e)}\n\n    @expose\n    def notify(self, title, body, priority='normal'):\n        from wito.notifications import notify\n\n        \"\"\"Show a system notification.\n\n        Args:\n            title (str): Title of the notification\n            body (str): Body text of the notification\n            priority (str, optional): Priority level ('low', 'normal', 'high'). Defaults to 'normal'\n\n        Returns:\n            dict: Operation result\n                - success (bool): True if notification was shown successfully\n\n        JavaScript Usage:\n            ```javascript\n            await wito.notify('Hello', 'This is a notification', 'normal');\n            ```\n        \"\"\"\n        notify(self.win, title, body, priority)\n        return {\"success\": True}\n</code></pre>"},{"location":"reference/wito/interface/#wito.interface.API-functions","title":"Functions","text":"emit_event <pre><code>emit_event(event, data)\n</code></pre> <p>Emits an event to the JavaScript layer with associated data.</p> <p>This method bridges Python and JavaScript by triggering events in the JavaScript environment. It serializes the Python data to JSON and calls the JavaScript _emitEvent method.</p> PARAMETER DESCRIPTION <code>event</code> <p>The name of the event to emit.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to pass with the event. Must be JSON-serializable.</p> <p> TYPE: <code>Any</code> </p> RAISES DESCRIPTION <code>TypeError</code> <p>If data cannot be serialized to JSON.</p> <code>ValueError</code> <p>If event name contains invalid characters.</p> Example <pre><code># Simple event with string data\ninterface.emit_event('user_logged_in', 'John Doe')\n\n# Event with dictionary data\ninterface.emit_event('data_updated', {\n    'id': 123,\n    'status': 'complete',\n    'timestamp': '2023-01-01'\n})\n\n# Event with list data\ninterface.emit_event('items_changed', [1, 2, 3, 4])\n</code></pre> Note <ul> <li>The data must be JSON-serializable</li> <li>Event names should follow JavaScript naming conventions</li> <li>The JavaScript layer must have the _emitEvent method defined</li> <li>Large data structures may impact performance</li> </ul> See Also <ul> <li>eval_js: Method used to execute JavaScript code</li> <li>json.dumps: JSON serialization method</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def emit_event(self, event, data):\n    \"\"\"\n    Emits an event to the JavaScript layer with associated data.\n\n    This method bridges Python and JavaScript by triggering events in the JavaScript\n    environment. It serializes the Python data to JSON and calls the JavaScript\n    _emitEvent method.\n\n    Args:\n        event (str): The name of the event to emit.\n        data (Any): The data to pass with the event. Must be JSON-serializable.\n\n    Raises:\n        TypeError: If data cannot be serialized to JSON.\n        ValueError: If event name contains invalid characters.\n\n    Example:\n        ```python\n        # Simple event with string data\n        interface.emit_event('user_logged_in', 'John Doe')\n\n        # Event with dictionary data\n        interface.emit_event('data_updated', {\n            'id': 123,\n            'status': 'complete',\n            'timestamp': '2023-01-01'\n        })\n\n        # Event with list data\n        interface.emit_event('items_changed', [1, 2, 3, 4])\n        ```\n\n    Note:\n        - The data must be JSON-serializable\n        - Event names should follow JavaScript naming conventions\n        - The JavaScript layer must have the _emitEvent method defined\n        - Large data structures may impact performance\n\n    See Also:\n        - eval_js: Method used to execute JavaScript code\n        - json.dumps: JSON serialization method\n    \"\"\"\n    js = f\"wito._emitEvent('{event}', {json.dumps(data)})\"\n    self.eval_js(js)\n</code></pre> theme_emit_change_event <pre><code>theme_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about desktop theme mode changes.</p> <p>Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('isDarkTheme', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Note <ul> <li>This event automatically gets subscribed to when the bridge is instantiated.</li> <li>The event automatically adds light-theme or dark-theme classes to document body.</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def theme_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about desktop theme mode changes.\n\n    Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('isDarkTheme', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n\n    Note:\n        - This event automatically gets subscribed to when the bridge is instantiated.\n        - The event automatically adds light-theme or dark-theme classes to document body.\n    \"\"\"\n    js = \"wito._emitEvent('isDarkTheme', {})\"\n    self.eval_js(js)\n</code></pre> screen_emit_change_event <pre><code>screen_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about screen configuration changes.</p> <p>Evaluates JavaScript code that triggers a 'screenChange' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('screenChange', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Source code in <code>wito/bridge.py</code> <pre><code>def screen_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about screen configuration changes.\n\n    Evaluates JavaScript code that triggers a 'screenChange' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('screenChange', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n    \"\"\"\n    js = \"wito._emitEvent('screenChange', {})\"\n    self.eval_js(js)\n</code></pre> thread <code>staticmethod</code> <pre><code>thread(func)\n</code></pre> <p>Decorator that runs a method in a separate Python thread.</p> <p>This decorator executes the method in a new thread to prevent blocking the main thread. Particularly useful for I/O operations or long-running tasks.</p> Example <pre><code>class MyApp(API):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        @expose\n        @thread  \n        def long_operation(self):\n            time.sleep(1)\n            return {\"status\": \"completed\"}\n</code></pre> Note <ul> <li>Should be used for I/O or CPU-intensive operations</li> <li>When used with @expose, @thread must be the inner decorator</li> </ul> Source code in <code>wito/interface.py</code> <pre><code>@staticmethod\ndef thread(func):\n    \"\"\"Decorator that runs a method in a separate Python thread.\n\n    This decorator executes the method in a new thread to prevent blocking\n    the main thread. Particularly useful for I/O operations or\n    long-running tasks.\n\n    Example:\n        ```python\n        class MyApp(API):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n\n                @expose\n                @thread  \n                def long_operation(self):\n                    time.sleep(1)\n                    return {\"status\": \"completed\"}\n        ```\n\n    Note:\n        - Should be used for I/O or CPU-intensive operations\n        - When used with @expose, @thread must be the inner decorator\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        def task():\n            try:\n                return func(*args, **kwargs)\n            except Exception as e:\n                return {\"error\": str(e)}\n\n        future = API.executor.submit(task)\n        return future\n\n    return wrapper\n</code></pre> expose <code>staticmethod</code> <pre><code>expose(func)\n</code></pre> <p>Decorator that exposes a Python objects to the JavaScript runtime.</p> Example <pre><code>class MyApp(API):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n            self.my_property = my_value\n\n            @expose\n            def my_method(self, param):\n                return {\"result\": param}\n\n            @property # read only property.\n            @expose  \n            def my_property(self):\n                return {\"result\": self.my_property}\n\n            @my_property.setter # combine with above to turn it in a write property.\n            @expose  \n            def my_property(self, value):\n                self.my_property = value\n                return {\"success\": True}\n</code></pre> Note <ul> <li>All exposed methods become async in JavaScript</li> <li>Return values must be JSON-serializable</li> <li>Can be combined with @thread decorator</li> </ul> Source code in <code>wito/interface.py</code> <pre><code>@staticmethod\ndef expose(func):\n    \"\"\"Decorator that exposes a Python objects to the JavaScript runtime.\n\n    Example:\n        ```python\n        class MyApp(API):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                    self.my_property = my_value\n\n                    @expose\n                    def my_method(self, param):\n                        return {\"result\": param}\n\n                    @property # read only property.\n                    @expose  \n                    def my_property(self):\n                        return {\"result\": self.my_property}\n\n                    @my_property.setter # combine with above to turn it in a write property.\n                    @expose  \n                    def my_property(self, value):\n                        self.my_property = value\n                        return {\"success\": True}\n        ```\n\n    Note:\n        - All exposed methods become async in JavaScript\n        - Return values must be JSON-serializable\n        - Can be combined with @thread decorator\n    \"\"\"\n    func._exposed = True\n    return func\n</code></pre> get_theme_mode <pre><code>get_theme_mode()\n</code></pre> <p>Get the current theme mode of the application.</p> RETURNS DESCRIPTION <code>dict</code> <p>Dictionary containing theme mode status - is_dark (bool): True if dark theme is active - is_light (bool): True if light theme is active</p> JavaScript Usage <pre><code>const theme = await wito.get_theme_mode();\nconsole.log('Dark mode:', theme.is_dark);\nconsole.log('Light mode:', theme.is_light);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef get_theme_mode(self):\n    \"\"\"Get the current theme mode of the application.\n\n    Returns:\n        dict: Dictionary containing theme mode status\n            - is_dark (bool): True if dark theme is active\n            - is_light (bool): True if light theme is active\n\n    JavaScript Usage:\n        ```javascript\n        const theme = await wito.get_theme_mode();\n        console.log('Dark mode:', theme.is_dark);\n        console.log('Light mode:', theme.is_light);\n        ```\n    \"\"\"\n    settings = Gtk.Settings.get_default()\n    is_dark = settings.get_property(\"gtk-application-prefer-dark-theme\")\n    return {\n        \"is_dark\": is_dark,\n        \"is_light\": not is_dark\n    }\n</code></pre> win_is_fullscreen <pre><code>win_is_fullscreen()\n</code></pre> <p>Check if the window is in fullscreen mode.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if window is fullscreen, False otherwise</p> JavaScript Usage <pre><code>const isFullscreen = await wito.win_is_fullscreen();\nconsole.log('Is fullscreen:', isFullscreen);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_is_fullscreen(self):\n    \"\"\"Check if the window is in fullscreen mode.\n\n    Returns:\n        bool: True if window is fullscreen, False otherwise\n\n    JavaScript Usage:\n        ```javascript\n        const isFullscreen = await wito.win_is_fullscreen();\n        console.log('Is fullscreen:', isFullscreen);\n        ```\n    \"\"\"\n    return self.win.is_fullscreen()\n</code></pre> win_close <pre><code>win_close()\n</code></pre> <p>Close the window.</p> JavaScript Usage <pre><code>await wito.win_close();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_close(self):\n    \"\"\"Close the window.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_close();\n        ```\n    \"\"\"\n    return self.win.close()\n</code></pre> win_fullscreen <pre><code>win_fullscreen()\n</code></pre> <p>Set the window to fullscreen mode.</p> JavaScript Usage <pre><code>await wito.win_fullscreen();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_fullscreen(self):\n    \"\"\"Set the window to fullscreen mode.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_fullscreen();\n        ```\n    \"\"\"\n    self.win.fullscreen()\n</code></pre> win_unfullscreen <pre><code>win_unfullscreen()\n</code></pre> <p>Exit fullscreen mode.</p> JavaScript Usage <pre><code>await wito.win_unfullscreen();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_unfullscreen(self):\n    \"\"\"Exit fullscreen mode.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_unfullscreen();\n        ```\n    \"\"\"\n    self.win.unfullscreen()\n</code></pre> win_get_focus <pre><code>win_get_focus()\n</code></pre> <p>Check if the window has focus..</p> JavaScript Usage <pre><code>const winGetfocus = await wito.win_get_focus();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_get_focus(self):\n    \"\"\"Check if the window has focus..\n\n    JavaScript Usage:\n        ```javascript\n        const winGetfocus = await wito.win_get_focus();\n        ```\n    \"\"\"\n    self.win.get_focus()\n</code></pre> win_set_focus <pre><code>win_set_focus()\n</code></pre> <p>Set focus to the window.</p> JavaScript Usage <pre><code>await wito.win_set_focus();\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_set_focus(self):\n    \"\"\"Set focus to the window.\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_set_focus();\n        ```\n    \"\"\"\n    self.win.set_focus(self.view)\n</code></pre> win_set_title <pre><code>win_set_title(title)\n</code></pre> <p>Set the window title.</p> PARAMETER DESCRIPTION <code>title</code> <p>The new title for the window</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Status of the operation - success (bool): True if title was set successfully</p> JavaScript Usage <pre><code>await wito.win_set_title('My App Title');\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_set_title(self, title):\n    \"\"\"Set the window title.\n\n    Args:\n        title (str): The new title for the window\n\n    Returns:\n        dict: Status of the operation\n            - success (bool): True if title was set successfully\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_set_title('My App Title');\n        ```\n    \"\"\"\n    self.win.set_title(title)\n    return {\"success\": True}\n</code></pre> win_get_size <pre><code>win_get_size()\n</code></pre> <p>Get the current window size.</p> RETURNS DESCRIPTION <code>dict</code> <p>Window dimensions - width (int): Window width in pixels - height (int): Window height in pixels</p> JavaScript Usage <pre><code>const size = await wito.win_get_size();\nconsole.log(`Window size: ${size.width}x${size.height}`);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_get_size(self):\n    \"\"\"Get the current window size.\n\n    Returns:\n        dict: Window dimensions\n            - width (int): Window width in pixels\n            - height (int): Window height in pixels\n\n    JavaScript Usage:\n        ```javascript\n        const size = await wito.win_get_size();\n        console.log(`Window size: ${size.width}x${size.height}`);\n        ```\n    \"\"\"\n    width, height = self.window.get_size()\n    return {\"width\": width, \"height\": height}\n</code></pre> win_set_size <pre><code>win_set_size(width, height)\n</code></pre> <p>Set the window size.</p> PARAMETER DESCRIPTION <code>width</code> <p>Desired window width in pixels</p> <p> TYPE: <code>int</code> </p> <code>height</code> <p>Desired window height in pixels</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Status of the operation - success (bool): True if size was set successfully</p> JavaScript Usage <pre><code>await wito.win_set_size(800, 600);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef win_set_size(self, width, height):\n    \"\"\"Set the window size.\n\n    Args:\n        width (int): Desired window width in pixels\n        height (int): Desired window height in pixels\n\n    Returns:\n        dict: Status of the operation\n            - success (bool): True if size was set successfully\n\n    JavaScript Usage:\n        ```javascript\n        await wito.win_set_size(800, 600);\n        ```\n    \"\"\"\n    self.window.resize(width, height)\n    return {\"success\": True}\n</code></pre> fs_get_app_path <pre><code>fs_get_app_path()\n</code></pre> <p>Get the application's base path.</p> RETURNS DESCRIPTION <code>dict</code> <p>Application path information - path (str): The base path of the application</p> JavaScript Usage <pre><code>const appPath = await wito.fs_get_app_path();\nconsole.log('App path:', appPath.path);\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef fs_get_app_path(self):\n    \"\"\"Get the application's base path.\n\n    Returns:\n        dict: Application path information\n            - path (str): The base path of the application\n\n    JavaScript Usage:\n        ```javascript\n        const appPath = await wito.fs_get_app_path();\n        console.log('App path:', appPath.path);\n        ```\n    \"\"\"\n    return {\"path\": app_base_path()}\n</code></pre> fs_list_dir <pre><code>fs_list_dir(path)\n</code></pre> <p>List contents of a directory.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the directory to list</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Directory contents - contents (Liststr): List of file/directory names - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_list_dir('/path/to/directory');\nif (result.contents) {\n    console.log('Directory contents:', result.contents);\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_list_dir(self, path):\n    \"\"\"List contents of a directory.\n\n    Args:\n        path (str): Path to the directory to list\n\n    Returns:\n        dict: Directory contents\n            - contents (Liststr): List of file/directory names\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_list_dir('/path/to/directory');\n        if (result.contents) {\n            console.log('Directory contents:', result.contents);\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        return {\"contents\": [str(p.name) for p in Path(path).iterdir()]}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_create_dir <pre><code>fs_create_dir(path)\n</code></pre> <p>Create a new directory.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path where to create the directory</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Operation result - success (bool): True if directory was created - path (str): Absolute path of created directory - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_create_dir('/path/to/new/directory');\nif (result.success) {\n    console.log('Created directory at:', result.path);\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef fs_create_dir(self, path):\n    \"\"\"Create a new directory.\n\n    Args:\n        path (str): Path where to create the directory\n\n    Returns:\n        dict: Operation result\n            - success (bool): True if directory was created\n            - path (str): Absolute path of created directory\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_create_dir('/path/to/new/directory');\n        if (result.success) {\n            console.log('Created directory at:', result.path);\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        Path(path).mkdir(parents=True, exist_ok=True)\n        return {\"success\": True, \"path\": str(Path(path).resolve())}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_del_file <pre><code>fs_del_file(path)\n</code></pre> <p>Delete a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the file to delete</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Operation result - success (bool): True if file was deleted - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_del_file('/path/to/file.txt');\nif (result.success) {\n    console.log('File deleted successfully');\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_del_file(self, path):\n    \"\"\"Delete a file.\n\n    Args:\n        path (str): Path to the file to delete\n\n    Returns:\n        dict: Operation result\n            - success (bool): True if file was deleted\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_del_file('/path/to/file.txt');\n        if (result.success) {\n            console.log('File deleted successfully');\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        Path(path).unlink()\n        return {\"success\": True}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_read_file <pre><code>fs_read_file(path)\n</code></pre> <p>Read contents of a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the file to read</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>File contents or error - content (str): The contents of the file - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_read_file('/path/to/file.txt');\nif (result.content) {\n    console.log('File contents:', result.content);\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_read_file(self, path):\n    \"\"\"Read contents of a file.\n\n    Args:\n        path (str): Path to the file to read\n\n    Returns:\n        dict: File contents or error\n            - content (str): The contents of the file\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_read_file('/path/to/file.txt');\n        if (result.content) {\n            console.log('File contents:', result.content);\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        return {\"content\": Path(path).read_text()}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_save_file <pre><code>fs_save_file(path, content)\n</code></pre> <p>Write content to a file.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to the file to write</p> <p> TYPE: <code>str</code> </p> <code>content</code> <p>Content to write to the file</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Operation result - success (bool): True if file was written successfully - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_save_file('/path/to/file.txt', 'Hello World!');\nif (result.success) {\n    console.log('File written successfully');\n} else {\n    console.error('Error:', result.error);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\n@thread\ndef fs_save_file(self, path, content):\n    \"\"\"Write content to a file.\n\n    Args:\n        path (str): Path to the file to write\n        content (str): Content to write to the file\n\n    Returns:\n        dict: Operation result\n            - success (bool): True if file was written successfully\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_save_file('/path/to/file.txt', 'Hello World!');\n        if (result.success) {\n            console.log('File written successfully');\n        } else {\n            console.error('Error:', result.error);\n        }\n        ```\n    \"\"\"\n    try:\n        Path(path).write_text(content)\n        return {\"success\": True}\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre> fs_file_exists <pre><code>fs_file_exists(path)\n</code></pre> <p>Check if a file or directory exists.</p> PARAMETER DESCRIPTION <code>path</code> <p>Path to check</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>Check result - exists (bool): True if path exists - is_file (bool): True if path is a file - is_dir (bool): True if path is a directory - error (str, optional): Error message if operation failed</p> JavaScript Usage <pre><code>const result = await wito.fs_file_exists('/path/to/check');\nif (result.exists) {\n    console.log('Path exists');\n    console.log('Is file:', result.is_file);\n    console.log('Is directory:', result.is_dir);\n}\n</code></pre> Source code in <code>wito/interface.py</code> <pre><code>@expose\ndef fs_file_exists(self, path):\n    \"\"\"Check if a file or directory exists.\n\n    Args:\n        path (str): Path to check\n\n    Returns:\n        dict: Check result\n            - exists (bool): True if path exists\n            - is_file (bool): True if path is a file\n            - is_dir (bool): True if path is a directory\n            - error (str, optional): Error message if operation failed\n\n    JavaScript Usage:\n        ```javascript\n        const result = await wito.fs_file_exists('/path/to/check');\n        if (result.exists) {\n            console.log('Path exists');\n            console.log('Is file:', result.is_file);\n            console.log('Is directory:', result.is_dir);\n        }\n        ```\n    \"\"\"\n    try:\n        path_obj = Path(path)\n        exists = path_obj.exists()\n        return {\n            \"exists\": exists,\n            \"is_file\": exists and path_obj.is_file(),\n            \"is_dir\": exists and path_obj.is_dir()\n        }\n    except OSError as e:\n        return {\"error\": str(e)}\n</code></pre>"},{"location":"reference/wito/interface/#bridge","title":"Bridge","text":""},{"location":"reference/wito/interface/#wito.bridge","title":"wito.bridge","text":""},{"location":"reference/wito/interface/#wito.bridge-classes","title":"Classes","text":""},{"location":"reference/wito/interface/#wito.bridge.PythonJavaScriptBridge","title":"PythonJavaScriptBridge","text":"Source code in <code>wito/bridge.py</code> <pre><code>class PythonJavaScriptBridge:\n    def __init__(self, webview, window, version, wito_dev_mode):\n        self.wito_dev_mode = wito_dev_mode\n        self.view = webview\n        self.win = window\n        self.version = version\n        self.exposed_methods = {}\n        self.pending_js = []\n        self.register_exposed_methods()\n        self.win.connect('realize', self.on_realize)\n\n    def register_exposed_methods(self):\n        for name, method in inspect.getmembers(self, inspect.ismethod):\n            if hasattr(method, '_exposed'):\n                if self.wito_dev_mode:\n                    print(f\"Registering exposed method: {name}\")\n                self.exposed_methods[name] = method\n\n    def eval_js(self, js, callback=None):\n        if self.wito_dev_mode:\n            print(f\"Evaluating JS: {js}\")\n        if self.view.is_loading():\n            self.pending_js.append((js, callback))\n        else:\n            self.view.evaluate_javascript(js, -1, None, callback or None)\n\n    def execute_pending_js(self):\n        while self.pending_js:\n            if self.wito_dev_mode:\n                print(\"Executing pending JS\")   \n            js, callback = self.pending_js.pop(0)\n            self.view.evaluate_javascript(js, -1, None, callback or None)\n\n    def emit_event(self, event, data):\n        \"\"\"\n        Emits an event to the JavaScript layer with associated data.\n\n        This method bridges Python and JavaScript by triggering events in the JavaScript\n        environment. It serializes the Python data to JSON and calls the JavaScript\n        _emitEvent method.\n\n        Args:\n            event (str): The name of the event to emit.\n            data (Any): The data to pass with the event. Must be JSON-serializable.\n\n        Raises:\n            TypeError: If data cannot be serialized to JSON.\n            ValueError: If event name contains invalid characters.\n\n        Example:\n            ```python\n            # Simple event with string data\n            interface.emit_event('user_logged_in', 'John Doe')\n\n            # Event with dictionary data\n            interface.emit_event('data_updated', {\n                'id': 123,\n                'status': 'complete',\n                'timestamp': '2023-01-01'\n            })\n\n            # Event with list data\n            interface.emit_event('items_changed', [1, 2, 3, 4])\n            ```\n\n        Note:\n            - The data must be JSON-serializable\n            - Event names should follow JavaScript naming conventions\n            - The JavaScript layer must have the _emitEvent method defined\n            - Large data structures may impact performance\n\n        See Also:\n            - eval_js: Method used to execute JavaScript code\n            - json.dumps: JSON serialization method\n        \"\"\"\n        js = f\"wito._emitEvent('{event}', {json.dumps(data)})\"\n        self.eval_js(js)\n\n    def on_realize(self, widget):\n        self.settings = Gio.Settings.new(\"org.gnome.desktop.interface\")\n        self.settings.connect(\"changed::color-scheme\", self.on_theme_change)\n        self.win.get_display().get_monitors().connect('items-changed', self.on_monitors_changed)\n        GLib.idle_add(self.set_initial_theme)\n\n    def check_theme(self):\n        try:\n            color_scheme = self.settings.get_string(\"color-scheme\")\n            is_dark = color_scheme == \"prefer-dark\"\n            if self.wito_dev_mode:\n                print(f\"Color scheme: {color_scheme}\", f\"isDark:{is_dark}\")\n            return is_dark\n        except Exception as e:\n            print(f\"Error checking theme: {e}\")\n\n    def set_initial_theme(self):\n        is_dark = self.check_theme()\n        self.set_body_theme_class(is_dark)\n\n    def on_theme_change(self, settings, key):        \n        is_dark = self.check_theme()\n        self.set_body_theme_class(is_dark)\n\n    def theme_emit_change_event(self):\n        \"\"\"\n        Emits a JavaScript event to notify about desktop theme mode changes.\n\n        Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty\n        payload object.\n\n        Example JavaScript usage:            \n            wito.addEventListener('isDarkTheme', (event) =&gt; {\n                // Handle screen change event\n                console.log('Screen configuration changed');\n            });\n\n        Note:\n            - This event automatically gets subscribed to when the bridge is instantiated.\n            - The event automatically adds light-theme or dark-theme classes to document body.\n        \"\"\"\n        js = \"wito._emitEvent('isDarkTheme', {})\"\n        self.eval_js(js)\n\n\n    def set_body_theme_class(self, is_dark):\n        theme_class = 'dark-theme' if is_dark else 'light-theme'\n        js = f\"\"\"\n            document.body.classList.remove('dark-theme', 'light-theme');\n            document.body.classList.add('{theme_class}');\n            console.log('Desktop changed to {theme_class}');\n        \"\"\"\n        self.eval_js(js)\n\n    def on_monitors_changed(self, list_model, position, removed, added):\n        self.screen_emit_change_event()\n\n    def screen_emit_change_event(self):\n        \"\"\"\n        Emits a JavaScript event to notify about screen configuration changes.\n\n        Evaluates JavaScript code that triggers a 'screenChange' event with an empty\n        payload object.\n\n        Example JavaScript usage:            \n            wito.addEventListener('screenChange', (event) =&gt; {\n                // Handle screen change event\n                console.log('Screen configuration changed');\n            });\n        \"\"\"\n        js = \"wito._emitEvent('screenChange', {})\"\n        self.eval_js(js)\n</code></pre>"},{"location":"reference/wito/interface/#wito.bridge.PythonJavaScriptBridge-functions","title":"Functions","text":"emit_event <pre><code>emit_event(event, data)\n</code></pre> <p>Emits an event to the JavaScript layer with associated data.</p> <p>This method bridges Python and JavaScript by triggering events in the JavaScript environment. It serializes the Python data to JSON and calls the JavaScript _emitEvent method.</p> PARAMETER DESCRIPTION <code>event</code> <p>The name of the event to emit.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to pass with the event. Must be JSON-serializable.</p> <p> TYPE: <code>Any</code> </p> RAISES DESCRIPTION <code>TypeError</code> <p>If data cannot be serialized to JSON.</p> <code>ValueError</code> <p>If event name contains invalid characters.</p> Example <pre><code># Simple event with string data\ninterface.emit_event('user_logged_in', 'John Doe')\n\n# Event with dictionary data\ninterface.emit_event('data_updated', {\n    'id': 123,\n    'status': 'complete',\n    'timestamp': '2023-01-01'\n})\n\n# Event with list data\ninterface.emit_event('items_changed', [1, 2, 3, 4])\n</code></pre> Note <ul> <li>The data must be JSON-serializable</li> <li>Event names should follow JavaScript naming conventions</li> <li>The JavaScript layer must have the _emitEvent method defined</li> <li>Large data structures may impact performance</li> </ul> See Also <ul> <li>eval_js: Method used to execute JavaScript code</li> <li>json.dumps: JSON serialization method</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def emit_event(self, event, data):\n    \"\"\"\n    Emits an event to the JavaScript layer with associated data.\n\n    This method bridges Python and JavaScript by triggering events in the JavaScript\n    environment. It serializes the Python data to JSON and calls the JavaScript\n    _emitEvent method.\n\n    Args:\n        event (str): The name of the event to emit.\n        data (Any): The data to pass with the event. Must be JSON-serializable.\n\n    Raises:\n        TypeError: If data cannot be serialized to JSON.\n        ValueError: If event name contains invalid characters.\n\n    Example:\n        ```python\n        # Simple event with string data\n        interface.emit_event('user_logged_in', 'John Doe')\n\n        # Event with dictionary data\n        interface.emit_event('data_updated', {\n            'id': 123,\n            'status': 'complete',\n            'timestamp': '2023-01-01'\n        })\n\n        # Event with list data\n        interface.emit_event('items_changed', [1, 2, 3, 4])\n        ```\n\n    Note:\n        - The data must be JSON-serializable\n        - Event names should follow JavaScript naming conventions\n        - The JavaScript layer must have the _emitEvent method defined\n        - Large data structures may impact performance\n\n    See Also:\n        - eval_js: Method used to execute JavaScript code\n        - json.dumps: JSON serialization method\n    \"\"\"\n    js = f\"wito._emitEvent('{event}', {json.dumps(data)})\"\n    self.eval_js(js)\n</code></pre> theme_emit_change_event <pre><code>theme_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about desktop theme mode changes.</p> <p>Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('isDarkTheme', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Note <ul> <li>This event automatically gets subscribed to when the bridge is instantiated.</li> <li>The event automatically adds light-theme or dark-theme classes to document body.</li> </ul> Source code in <code>wito/bridge.py</code> <pre><code>def theme_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about desktop theme mode changes.\n\n    Evaluates JavaScript code that triggers a 'isDarkTheme' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('isDarkTheme', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n\n    Note:\n        - This event automatically gets subscribed to when the bridge is instantiated.\n        - The event automatically adds light-theme or dark-theme classes to document body.\n    \"\"\"\n    js = \"wito._emitEvent('isDarkTheme', {})\"\n    self.eval_js(js)\n</code></pre> screen_emit_change_event <pre><code>screen_emit_change_event()\n</code></pre> <p>Emits a JavaScript event to notify about screen configuration changes.</p> <p>Evaluates JavaScript code that triggers a 'screenChange' event with an empty payload object.</p> Example JavaScript usage <p>wito.addEventListener('screenChange', (event) =&gt; {     // Handle screen change event     console.log('Screen configuration changed'); });</p> Source code in <code>wito/bridge.py</code> <pre><code>def screen_emit_change_event(self):\n    \"\"\"\n    Emits a JavaScript event to notify about screen configuration changes.\n\n    Evaluates JavaScript code that triggers a 'screenChange' event with an empty\n    payload object.\n\n    Example JavaScript usage:            \n        wito.addEventListener('screenChange', (event) =&gt; {\n            // Handle screen change event\n            console.log('Screen configuration changed');\n        });\n    \"\"\"\n    js = \"wito._emitEvent('screenChange', {})\"\n    self.eval_js(js)\n</code></pre>"},{"location":"reference/wito/notifications/","title":"Notifications","text":""},{"location":"reference/wito/notifications/#wito.notifications","title":"wito.notifications","text":""},{"location":"reference/wito/screen/","title":"Screen","text":""},{"location":"reference/wito/screen/#wito.screen","title":"wito.screen","text":""},{"location":"reference/wito/utils/","title":"Utils","text":""},{"location":"reference/wito/utils/#wito.utils","title":"wito.utils","text":""},{"location":"reference/wito/utils/#wito.utils-functions","title":"Functions","text":""},{"location":"reference/wito/utils/#wito.utils.load_config","title":"load_config","text":"<pre><code>load_config()\n</code></pre> <p>Load application configuration from a JSON file located in the same directory as the HTML file.</p> Source code in <code>wito/utils.py</code> <pre><code>def load_config():\n    \"\"\"Load application configuration from a JSON file located in the same directory as the HTML file.\"\"\"\n    config_file = app_base_path() + '/wito-config.json'\n    if not os.path.exists(config_file):\n        raise FileNotFoundError(f\"Configuration file '{config_file}' not found.\")\n\n    with open(config_file, 'r') as f:\n        config = json.load(f)\n\n    return config\n</code></pre>"},{"location":"reference/wito/window/","title":"Window","text":""},{"location":"reference/wito/window/#wito.window","title":"wito.window","text":""},{"location":"reference/wito/window/#wito.window-classes","title":"Classes","text":""},{"location":"reference/wito/window/#wito.window.Window","title":"Window","text":"<p>               Bases: <code>ApplicationWindow</code></p> Source code in <code>wito/window.py</code> <pre><code>class Window(Gtk.ApplicationWindow):\n    def __init__(self, *args, extended_api, config, application, **kwargs):\n        win_config = config.get(\"window\")\n        super().__init__(*args, application=application, **kwargs)\n\n        self.app = application\n        self.webview = webview(self, extended_api, config.get(\"wito\"))\n        self.set_default_size(\n            win_config.get(\"width\"),\n            win_config.get(\"height\"))\n\n        if win_config.get(\"isResizable\"):\n            self.set_resizable(win_config.get(\"isResizable\", True))\n\n        if win_config.get(\"isFullScreen\"):\n            self.fullscreen()\n        elif win_config.get(\"isMaximized\"):\n            self.maximize()\n\n        self.set_title(win_config.get(\"title\"))\n        self.set_child(self.webview)\n        self.connect(\"close-request\", self.on_close_request)\n        self.connect('realize', self.on_realize)\n        self.cleanup()\n        self.present()\n\n\n    def cleanup(self):\n        del self.webview\n\n    def on_realize(self, widget):\n        # seems on wayland windows cannot be centered\n        self.present()\n\n    def on_close_request(self, *args):\n        \"\"\"Handle the window close request by destroying the window.\"\"\"\n        self.destroy()\n        if self.app:\n            self.app.quit()\n        else:\n            print(\"Warning: Application reference not found. Unable to quit the application.\")\n        return True \n\n    def show(self):\n        super().show()\n</code></pre>"},{"location":"reference/wito/window/#wito.window.Window-functions","title":"Functions","text":"on_close_request <pre><code>on_close_request(*args)\n</code></pre> <p>Handle the window close request by destroying the window.</p> Source code in <code>wito/window.py</code> <pre><code>def on_close_request(self, *args):\n    \"\"\"Handle the window close request by destroying the window.\"\"\"\n    self.destroy()\n    if self.app:\n        self.app.quit()\n    else:\n        print(\"Warning: Application reference not found. Unable to quit the application.\")\n    return True \n</code></pre>"},{"location":"reference/wito/extensions/","title":"Index","text":""},{"location":"reference/wito/extensions/#wito.extensions","title":"wito.extensions","text":""},{"location":"reference/wito/extensions/#wito.extensions-modules","title":"Modules","text":""},{"location":"reference/wito/extensions/#wito.extensions.ext_loader","title":"ext_loader","text":""},{"location":"reference/wito/extensions/#wito.extensions.ext_loader-functions","title":"Functions","text":"extension_manager <pre><code>extension_manager(\n    wito_base_path, app_base_path, dev_mode, api, webview\n)\n</code></pre> <p>Load and merge all extension files.</p> Source code in <code>wito/extensions/ext_loader.py</code> <pre><code>def extension_manager(wito_base_path, app_base_path, dev_mode, api, webview):\n    \"\"\"Load and merge all extension files.\"\"\"\n    try:\n        # Collect files from both directories\n        wito_files = _collect_extension_files(wito_base_path)\n        app_files = _collect_extension_files(app_base_path)\n\n        # Merge and inject CSS\n        wito_css = _merge_files(dev_mode, wito_files['css'], file_type='css')\n        app_css = _merge_files(dev_mode, app_files['css'], file_type='css')\n\n        if wito_css and wito_css.content:\n            _inject_css(webview, wito_css.content, \"wito-styles\")\n            if dev_mode:\n                print(f\"Injected Wito CSS from: {', '.join(wito_css.sources)}\")\n\n        if app_css and app_css.content:\n            _inject_css(webview, app_css.content, \"app-styles\")  # Fixed: added webview parameter\n            if dev_mode:\n                print(f\"Injected App CSS from: {', '.join(app_css.sources)}\")\n\n        # Merge and inject JavaScript\n        wito_js = _merge_files(dev_mode, wito_files['js'], file_type='js')\n        app_js = _merge_files(dev_mode, app_files['js'], file_type='js')\n\n        if wito_js and wito_js.content:\n            api.eval_js(wito_js.content)\n            if dev_mode:\n                print(f\"Injected Wito JS from: {', '.join(wito_js.sources)}\")\n\n        if app_js and app_js.content:\n            api.eval_js(app_js.content)\n            if dev_mode:\n                print(f\"Injected App JS from: {', '.join(app_js.sources)}\")\n\n        # Report any errors\n        all_errors = []\n        for result in [wito_css, app_css, wito_js, app_js]:\n            if result and hasattr(result, 'error_files'):\n                all_errors.extend(result.error_files)\n        _report_errors(all_errors)\n\n    except Exception as e:\n        print(f\"Error loading extensions: {str(e)}\")\n</code></pre>"},{"location":"reference/wito/extensions/ext_loader/","title":"Ext loader","text":""},{"location":"reference/wito/extensions/ext_loader/#wito.extensions.ext_loader","title":"wito.extensions.ext_loader","text":""},{"location":"reference/wito/extensions/ext_loader/#wito.extensions.ext_loader-functions","title":"Functions","text":""},{"location":"reference/wito/extensions/ext_loader/#wito.extensions.ext_loader.extension_manager","title":"extension_manager","text":"<pre><code>extension_manager(\n    wito_base_path, app_base_path, dev_mode, api, webview\n)\n</code></pre> <p>Load and merge all extension files.</p> Source code in <code>wito/extensions/ext_loader.py</code> <pre><code>def extension_manager(wito_base_path, app_base_path, dev_mode, api, webview):\n    \"\"\"Load and merge all extension files.\"\"\"\n    try:\n        # Collect files from both directories\n        wito_files = _collect_extension_files(wito_base_path)\n        app_files = _collect_extension_files(app_base_path)\n\n        # Merge and inject CSS\n        wito_css = _merge_files(dev_mode, wito_files['css'], file_type='css')\n        app_css = _merge_files(dev_mode, app_files['css'], file_type='css')\n\n        if wito_css and wito_css.content:\n            _inject_css(webview, wito_css.content, \"wito-styles\")\n            if dev_mode:\n                print(f\"Injected Wito CSS from: {', '.join(wito_css.sources)}\")\n\n        if app_css and app_css.content:\n            _inject_css(webview, app_css.content, \"app-styles\")  # Fixed: added webview parameter\n            if dev_mode:\n                print(f\"Injected App CSS from: {', '.join(app_css.sources)}\")\n\n        # Merge and inject JavaScript\n        wito_js = _merge_files(dev_mode, wito_files['js'], file_type='js')\n        app_js = _merge_files(dev_mode, app_files['js'], file_type='js')\n\n        if wito_js and wito_js.content:\n            api.eval_js(wito_js.content)\n            if dev_mode:\n                print(f\"Injected Wito JS from: {', '.join(wito_js.sources)}\")\n\n        if app_js and app_js.content:\n            api.eval_js(app_js.content)\n            if dev_mode:\n                print(f\"Injected App JS from: {', '.join(app_js.sources)}\")\n\n        # Report any errors\n        all_errors = []\n        for result in [wito_css, app_css, wito_js, app_js]:\n            if result and hasattr(result, 'error_files'):\n                all_errors.extend(result.error_files)\n        _report_errors(all_errors)\n\n    except Exception as e:\n        print(f\"Error loading extensions: {str(e)}\")\n</code></pre>"}]}